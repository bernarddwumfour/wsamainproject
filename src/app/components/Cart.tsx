"use client"
import React, { useState,useContext } from 'react'
import Cartitem from './Cartitem'
import { Appcontext } from '../../../context/AppContextProvider'
import Link from 'next/link'
import { Order, OrderDetails } from './types'

const Cart = () => {
  const {cartopen,cart} = useContext(Appcontext)
  // Helper function to generate OrderDetails from cart items
  // const generateOrderDetails = (cart: product[]): OrderDetails[] => {
  //   return cart.map((item, index) => ({
  //     orderDetailsID: index + 1, // In a real application, this would be generated by the backend
  //     orderID: 0, // This will be set by the backend
  //     listingID: item.id,
  //     quantity: 1,
  //     price: item.price,
  //     total: item.price,
  //     createdAt: new Date().toISOString()
  //   }));
  // };

  // // Create order details from cart items
  // const orderDetails = generateOrderDetails(cart);

  // Calculate the total amount
  // const totalAmount = orderDetails.reduce((sum, item) => sum + item.total, 0);

  const [order, setOrder] = useState<Order>({
    orderID: 5, // This should be generated by your backend
    userID: 123, // Replace with actual user ID
    orderPlaced: new Date().toISOString(),
    customerID: 456, // Replace with actual customer ID
    isOrderFulfilled: false,
    status: 'Pending',
    totalAmount: 100.0, // Replace with actual total amount
    orderDetails: [
      {
        orderDetailsID: 5,
        orderID: 5, // This will be set by your backend
        listingID: '12',
        quantity: 1,
        price: 100.0,
        total: 100.0,
        createdAt: new Date().toISOString()
      }
    ]
  });

  const submitOrder = async (order: Order) => {
    const apiUrl = process.env.NEXT_PUBLIC_DELIVERYMANAGEMENT_API_URL;
    const response = await fetch(`https://localhost:7093/api/Orders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(order),
    });
  
    if (!response.ok) {
      throw new Error('Failed to submit order');
    }
  
    return response.json();
  };

  const handleCheckout = async () => {
    
    try {
      const result = await submitOrder(order);
      console.log('Order submitted successfully:', result);
      alert("Order submitted successfully");
      // Handle successful order submission (e.g., show a confirmation message)
    } catch (error) {
      console.error('Error submitting order:', error);
      // Handle error (e.g., show an error message)
    }
  };


  return (
    <div className={`${cartopen?"block":"hidden"} absolute py-2 bg-white top-24 p-1  right-12 shadow-lg`}>
        <p className='text-center font-semibold text-[1rem] p-2'>Products  In Cart</p>
        {cart && cart.length>0 && cart.map(product=>(<Cartitem key={product.id} product={product}/>))}
        {cart && cart.length<1 && <p className='text-[.95rem] p-6 px-10'>No products in cart</p>}
        <Link href="/checkout"><div onClick={handleCheckout} className="text-center bg-gray-600 text-white p-2 text-[1rem] rounded-sm mt-4">Go To CheckOut</div></Link>
    </div>
  )
}

export default Cart